<html>
	<head>
		<style>
		.background {
		    fill: #FFFFFF;
		    fill-opacity: 0.01;
		}

		.component {
		    fill: #e1e1e1;
		}

		.component .label {
		    font-family: Myriad, "Helvetic Neue", Helvetica, Arial;
		    text-anchor: middle;
		    fill: #0000FF;
		}

		.label {
		    font-family:  Myriad, "Helvetic Neue", Helvetica, Arial;
		    text-anchor: middle;
		}


        div {
            width: auto;
            height: auto;
            box-sizing: border-box;
            float: left;
        } 




    </style>
		<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.6/d3.min.js"></script>
		<script type="text/javascript" src="https://code.jquery.com/jquery-1.11.3.js"></script>
		<script type="text/javascript">

			; (function ($) { 
			    var instances = {};
			    $.fn.extend({
			        draw: function (options) {
			            options = $.extend({}, $.draw.defaults, {
			            }, options);

			            return this.each(function () {
			                new $.draw(this, options);
			            });
			        }
			    });

			    $.draw = function (input, options) {
			        if (arguments.length === 1 && typeof arguments[0] == "string") {
			            var id = arguments[0];

			            if (instances.hasOwnProperty(id)) {
			                return instances[id];
			            } else {
			                alert("無此物件");
			            }
			        } else {
			            var self = input;
			            var $self = $(input);
    			    	var _mouseClick;
					    var  _currentArc= 0, _currentArc2= 0, _currentValue=0;
					    var arcObj = [];
					    var round = Math.ceil(options._value/options._maxValue);
					    var _selection = d3.select(self);
					    var margin = {top:0, right:0, bottom:30, left:0};
					    

					    if (options._responsive){
					    	if (options._topInfo){
					    		options.__height = $self.height() - options._topInfoLineHeight;
					    		options.__width = $self.height() - options._topInfoLineHeight;
					    	} else {
					    		options.__height = $self.height();
					    		options.__width = $self.width();
					    	}
					    }

					    if (options._topInfo){
					    	margin.top = options._topInfoLineHeight
					    	options.__height = options.__height + margin.top;
					    }
					    // 畫出 arc
					    // private funciton
					    var makeArc = function(){
					    	
					    	for (i = 0; i < round; i++){
					    		if (i == (round - 1)){
					    			arcObj[i] = d3.svg.arc().startAngle(0 * (Math.PI/180)).endAngle(0);
					    		} else {
					    			arcObj[i] = d3.svg.arc().startAngle(0 * (Math.PI/180));
					    		}
					    	}
					    }

					    var measure = function() {
					        var _width = options._diameter - margin.right - margin.left - margin.top - margin.bottom;
					        var _height = 0;

					        $.each(arcObj, function(i){
								arcObj[i].outerRadius(options.__width/2 );
								arcObj[i].innerRadius(options.__width/2 * (1 - options._radiusMultiple));
					        });

					        

					        //_arc.outerRadius(_width/2);
					        //_arc.innerRadius(_width/2 * .85);
					        //_arc2.outerRadius(_width/2);
					        //_arc2.innerRadius(_width/2 * .85);
					    }

				 	 	var arcTween = function(a) {
					        var i = d3.interpolate(_currentArc, a);

					        return function(t) {
					            _currentArc=i(t);
					            return arcObj[0].endAngle(i(t))();
					        };
					    }

					    var arcTween2 = function(a) {
					        var i = d3.interpolate(_currentArc2, a);

					        return function(t) {
					            return arcObj[0].endAngle(i(t))();
					        };
					    }

					    var labelTween = function(a) {
					        var i = d3.interpolate(_currentValue, a);
					        _currentValue = i(0);

					        return function(t) {
					            _currentValue = i(t);
					            this.textContent = Math.round(i(t)) + "%";
					        }
					    }

					    var component = function(){
					    	_selection.each(function () {
					    		var svg = d3.select(this).selectAll("svg").data([options._value]);
					    		var enter = svg.enter().append("svg").attr("class","radial-svg").append("g");
					    		var topInfoLineHeight;
				    		 	measure();

				    		 	svg.attr("width", options.__width)
                					.attr("height", options.__height);

                				var background = enter.append("g").attr("class","component")
					                //.on("click",onMouseClick);

					            arcObj[0].endAngle(360 * (Math.PI/180));
								background.append("rect")
								    .attr("class","background")
								    .attr("width", options.__width)
								    .attr("height", options.__height - margin.top);

								background.append("path")
								    .attr("transform", "translate(" + options.__width/2 + "," + options.__width/2 + ")")
								    .attr("d",  arcObj[0]);

								background.append("text")
								    .attr("class", "label")
								    .attr("transform", "translate(" + options.__width/2 + "," + (options.__width) + ")")
								    .text(options._label);

								// 漸層
								if (options._topInfo){
									topInfoLineHeight = options._topInfoLineHeight;
								} else {
									topInfoLineHeight = 0;
								}
								var gradient = background.append("svg:defs")
									.append("svg:linearGradient")
								    .attr("id", "gradient")
								    .attr("x1", "100%")
								    .attr("y1", "0%")
								    .attr("x2", "0%")
								    .attr("y2", "0%")
								    .attr("spreadMethod", "pad");

							    gradient.append("svg:stop")
								    .attr("offset", "0%")
								    .attr("stop-color", "#7abcff")
								    .attr("stop-opacity", 1);

								gradient.append("svg:stop")
								    .attr("offset", "100%")
								    .attr("stop-color", "#e1ffff")
								    .attr("stop-opacity", 1);

								var circle = background.append('circle')
								    .attr('cx', options.__width / 2)
								    .attr('cy', options.__height / 2 - topInfoLineHeight/ 2)
								    .attr('r', options.__width/2 * (1 - options._radiusMultiple))
								    .attr('fill', 'url(#gradient)');

								var g = svg.select("g")
								    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

								

							    arcObj[0].endAngle(_currentArc);
							    enter.append("g").attr("class", "arcs");

							    	var path = [];
							    	var colorlength = options._pathcolor.length;
							    	for (var i =0; i < arcObj.length; i ++){
							    		var m = i % colorlength
							    		path[i] = svg.select(".arcs").selectAll(".arc").data([options._value]);
							    		path[i].enter().append("path")
							                .attr("class","arc" + i).attr("fill", options._pathcolor[m])
							                .attr("transform", "translate(" + options.__width/2 + "," + options.__width/2 + ")")
							                .attr("d", arcObj[i]);
							    	}
						            /*
						            var path = svg.select(".arcs").selectAll(".arc").data([options._value]);
						            path.enter().append("path")
						                .attr("class","arc")
						                .attr("transform", "translate(" + _width/2 + "," + _width/2 + ")")
						                .attr("d", arcObj[0]);

						            //Another path in case we exceed 100%
						            var path2 = svg.select(".arcs").selectAll(".arc2").data([options._value]);
						            path2.enter().append("path")
						                .attr("class","arc2")
						                .attr("transform", "translate(" + _width/2 + "," + _width/2 + ")")
						                .attr("d", arcObj[1]);
									*/


						            enter.append("g").attr("class", "labels");


						            var label = svg.select(".labels").selectAll(".label").data([options._value]);
						            label.enter().append("text")
						                .attr("class","label")
						                .attr("y",options.__width/2 + options._fontSize/3)
						                .attr("x",options.__width/2)
						                .attr("width",options.__width)
						                .attr("font-size", options._fontSize + "px")
						                // .attr("x",(3*_fontSize/2))
						                .text(options._value + options._Unit)
						                .attr("fill", options._insideWordColor)
						                // function (d) { return Math.round((options._value-options._minValue)/(options._maxValue-options._minValue)*100) + "%" }
						                //.on("click",onMouseClick);

						            //path[0].exit().transition().duration(500).attr("x",1000).remove();

						            // 畫出 top info 
						            if (options._topInfo){
							            svg.append("g").attr("class", "topInfo")
							            var topInfo = svg.selectAll(".topInfo");
							            topInfo.append("line")
							            		.attr("x1", options.__width/2 ).attr("y1", 0).attr("x2", options.__width/2).attr("y2", options._topInfoLineHeight)
							            		.attr('stroke', options._topInfoLineColor)
							            		.attr('stroke-width', options._topInfoLineWidth);

							            topInfo.append("text")
							            .attr("class", "topinfoText")
							            .attr("y",15 + options._topInfoWordTop)
						                .attr("x",options.__width/2 + 10 + options._topInfoWordLeft)
						                .attr("font-size", options._topInfoWordFontsize)
						                .text(options._maxValue + options._Unit)
						                .attr("fill", options._topInfoWordColor)
					            	};


									var layout = function(svg) {

						                var ratio=(options._value-options._minValue)/(options._maxValue-options._minValue);
						                var endAngle=Math.min(360*ratio,360);
						                endAngle=endAngle * Math.PI/180;

						                path[0].datum(endAngle);
					                	path[0].transition().duration(options._duration)
					                    		.attrTween("d", arcTween);

						                for (var j =1; j < arcObj.length; j ++){
				                    		if (ratio > 1) {
				                    			path[j].datum(Math.min(360*(ratio-j),360) * Math.PI/180);
						                    	path[j].transition().delay(options._duration*j).duration(options._duration)
						                        .attrTween("d", arcTween2);
				                    		}

						                }
						                /*
						                path[0].datum(endAngle);
						                path[0].transition().duration(options._duration)
						                    .attrTween("d", arcTween);

						                if (ratio > 1) {
						                    path[1].datum(Math.min(360*(ratio-1),360) * Math.PI/180);
						                    path[1].transition().delay(options._duration).duration(options._duration)
						                        .attrTween("d", arcTween2);
						                }
						                */

						                // % 數動畫
						                /*
						                label.datum(Math.round(ratio*100));
						                label.transition().duration(options._duration)
						                    .tween("text",labelTween);
					                    */

						            }

            						layout(svg);



					    	});
					    }
					    makeArc();
						component();

			        }
			        instances[input.id] = self;
			    };

			    // 設定物件的初始設定
			    $.draw.defaults = {
					_data: [50, 100, 15, 20, 25],
					_duration:1000,
					__width: 151,
					__height: 151,
					_diameter: 150,
					_label: "",
					_fontSize:16,
					_value:5,
			        _minValue:0,
			        _maxValue:2,
			        _insideWordColor: "#000",
			        _pathcolor: ["red", "orange", "brown", "green", "blue", "Indigo", "Purple"],
			        _topInfo : true,
			        _topInfoLineHeight : 25,
			        _topInfoLineWidth : 1,
			        _topInfoLineColor : "#000",
			        _topInfoWordColor: "#000",
			        _topInfoWordFontsize:15,
			        _topInfoWordTop: 0,
			        _topInfoWordLeft: 0,
			        _Unit : "萬",
			        _responsive : false,
			        _radiusMultiple : 0.2,
			        _gradientDirection : []
			    };
			})(jQuery); // 傳入 Jquery 物件

			$(function(){

				$("#a").draw();
				$("#b").draw({
					_data: [50, 100, 15, 20, 25],
					_duration:1000,
					__width: 150,
					__height: 150,
					_diameter: 150,
					_label: "",
					_fontSize:16,
					_value:7,
			        _minValue:0,
			        _maxValue:12,
			        _pathcolor: ["#000", "orange", "yellow", "green", "blue", "Indigo", "Purple"],
			        _topInfo : false,
			        _radiusMultiple : 0.4
				});
				$("#c").draw({
					_data: [50, 100, 15, 20, 25],
					_duration:1000,
					__width: 300,
					__height: 300,
					_diameter: 150,
					_label: "",
					_fontSize:30,
					_value:45,
			        _minValue:0,
			        _maxValue:32,
			        _topInfo : true,
			        _pathcolor: ["red", "orange", "yellow", "green", "blue", "Indigo", "Purple"],
			        _responsive: true
				});
			})

		</script>

	</head>


	<body>
		<div id="a"></div>
		<div id="b"></div>
		<div style="width:175px; height:200px;" id="c"></div>
	</body>


</html>


<!--
var svg = d3.select(self)
	.append("svg")
	.attr("width", options.__width)
	.attr("height", options.__height);

var rect = svg.selectAll("rect")
	.data(options._data)
	.enter()
	.append("rect")
	.attr("x", function(d,i){
		return i * 22;
	})
	.attr("y", 0)
	.attr("width", 20)
	.attr("height", function(d){
		return d;
	});
	-->
